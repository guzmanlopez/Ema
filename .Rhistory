sapply(coordinates(isobatas), 'cbind')[,]
sapply(coordinates(isobatas), 'cbind')
sapply(coordinates(isobatas), 'cbind')[[1]]
sapply(coordinates(isobatas), 'cbind')[[1]][,]
sapply(coordinates(isobatas), 'cbind')[[2]][,]
sapply(coordinates(isobatas), 'cbind')[[3]][,]
sapply(coordinates(isobatas), 'cbind')[[1]][,]
sapply(coordinates(isobatas), 'cbind')[[]][,]
sapply(coordinates(isobatas), 'cbind')[[1]][,]
class(sapply(coordinates(isobatas), 'cbind')[[1]][,])
as.data.frame(sapply(coordinates(isobatas), 'cbind')[[1]][,])
as.data.frame(sapply(coordinates(isobatas), 'cbind')[[3]][,])
summary(list)
summary(list)[,1]
summary(list)[,2]
summary(list)[1,1]
makeDF <- function(List, Names) {
m <- t(vapply(List,
FUN = function(X) unlist(X)[Names],
FUN.VALUE = numeric(length(Names))))
as.data.frame(m)
}
system.time(sum(1:10))
createList(50)
makeDF(list, nms)
names(list)
summary(list)
vapply(list, FUN = function(X) unlist(X))
vapply(list, FUN = function(X) unlist(X)[1])
vapply(list, FUN = function(x)
)
vapply(list, FUN = function(x) unlist(x))
vapply(list, FUN.VALUE = function(x) unlist(x))
vapply(list,
FUN = function(X) unlist(X)[Names],
FUN.VALUE = numeric(length(Names)))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(45)))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(45))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric())
list
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(45))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(70))
length(unlist(list))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(13300))
vapply(list,
FUN = function(X) unlist(X),
FUN.VALUE = numeric(13300/2))
vapply(list, unlist(x))
vapply(list, unlist)
makeDF(list, nms, numeric())
vapply(list, unlist, numeric)
coordinatevalues(obj = isobatas)
coordinatevalues(isobatas)
coordnames(isobatas)
getLinesLinesSlot(SL = isobatas)
disaggregate(isobatas)
rbind.SpatialLinesDataFrame(isobatas)
isobatas@data
isobatas@lines
isobatas@lines[]
isobatas@lines[1]
isobatas@lines@coords
isobatas@lines$coords
isobatas@lines
names(isobatas@lines)
class(isobatas@lines)
summary(isobatas@lines)
do.call(rbind, isobatas@lines)
do.call('rbind', isobatas@lines)
rbind(isobatas@lines)
rbind.SpatialLines(isobatas)
rbind.SpatialLines(isobatas@lines)
rbind.SpatialLinesDataFrame(isobatas@lines)
list <- coordinates(isobatas)
list <- coordinates(isobatas)
n.obs <- sapply(list, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(list, "[", i = seq.max))
mat
t(sapply(list, "[", i = seq.max))
sapply(list, '[', seq(max(sapply(list, length))))
mat
rbind.fill(lapply(list, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
rbind.fill(lapply(list, as.data.frame))
summary(mat)
mat[1,1]
class(mat[1,1])
rbind(mat[,])
do.call('rbind',mat)
nrow(do.call('rbind',mat))
length(unlist(list))
length(unlist(list))/2
do.call('rbind',mat)
df <- as.data.frame(do.call('rbind',mat))
class(df)
df$V1
shiny::runApp('Documentos/Shiny/SBL')
# Extensión
xmin <- -55.0853471962
xmax <- -54.8169908485
ymin <- -35.0635161252
ymax <- -34.8499263791
isobatas <- readShapeLines(fn="~/Documentos/Shiny/SBL/shapes/isobatas-Maldonado.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
isobatas <- coordinates(isobatas)
n.obs <- sapply(isobatas, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(isobatas, "[", i = seq.max))
isobatas <- as.data.frame(do.call('rbind',mat))
colnames(isobatas) <- c("lon", "lat")
which(isobatas$lon < xmax & isobatas$lon > xmin & isobatas$lat < ymax & isobatas$lat > ymin)
isobatas <- isobatas[celdas_iso,]
celdas_iso <- which(isobatas$lon < xmax & isobatas$lon > xmin & isobatas$lat < ymax & isobatas$lat > ymin)
isobatas <- isobatas[celdas_iso,]
isobatas
shiny::runApp('Documentos/Shiny/SBL')
matrix(data = c(xmin,ymin,xmax,ymax),2,2)
matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = FALSE)
matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)
Polygon(coords = matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))
Polygon(coords = matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE), hole = TRUE)
Polygon(coords = matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE), hole = FALSE)
Polygon(coords=matrix(data = c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))
matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)
matrix(data=c(xmin,ymin,xmax,ymax),2,2, class(byrow = TRUE))
class(matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))
class(matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))[1,1]
class(matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))[,1]
class(matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))[1]
matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)
matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)[1,]
matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)[1,1]
class(matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)[1,1])
27/3.5
(3.5*100)/27
matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE)
Polygon(coords=matrix(data=c(xmin,ymin,xmax,ymax),2,2, byrow = TRUE))
Polygon(coords=matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymin,ymax,ymax),2,2, byrow = TRUE))
Polygon(coords=matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymin,ymax,ymax),4,2, byrow = TRUE))
matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymin,ymax,ymax),4,2, byrow = TRUE)
matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymin,ymax,ymax),4,2, byrow = FALSE)
Polygon(coords=matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymin,ymax,ymax),4,2, byrow = FALSE))
Polygon(coords=matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymax,ymin,ymax),4,2, byrow = FALSE))
matrix(data=c(xmin,xmin,xmax,xmax,ymin,ymax,ymin,ymax),4,2, byrow = FALSE)
xmin
xmax
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
install.packages(c("gWidgets", "httr", "markdown", "mime", "RCurl", "RJSONIO", "shiny"))
shiny::runApp('Documentos/Shiny/SBL')
load("/home/guzman/GitHub/PAS-DINARA/.RData")
a <- 1:100
a
saveRDS(a, "/home/guzman/Escritorio/a.rds")
saveRDS(a, "/home/guzman/Escritorio/a.RData")
a <- 1:100
saveRDS(a, "/home/guzman/Escritorio/a.RData")
load("/home/guzman/Escritorio/a.RData")
a <- 1:100
save(a, "/home/guzman/Escritorio/a.RData")
b <- 1:100
save(a, b, "/home/guzman/Escritorio/ab.RData")
save.image(file = "/home/guzman/Escritorio/ab.RData")
load("/home/guzman/Escritorio/ab.RData")
library(shiny)
library(leaflet)
library(sp)
library(maptools)
library(geosphere)
library(stringr)
library(xts)
costa <- readShapeLines(fn="~/Documentos/Shiny/SBL/shapes/linea_de_costa.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
est_mejillon <- readShapePoints(fn="~/Documentos/Shiny/SBL/shapes/Estaciones-muestreo-mejillon.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
isobatas <- readShapeLines(fn="~/Documentos/Shiny/SBL/shapes/isobatas-Maldonado.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
SpatialPolygons(Srl = list())
rgeos::gIntersection(isobatas, )
isobatas <- coordinates(isobatas)
n.obs <- sapply(isobatas, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(isobatas, "[", i = seq.max))
isobatas <- as.data.frame(do.call('rbind',mat))
colnames(isobatas) <- c("lon", "lat")
celdas_iso <- which(isobatas$lon < xmax & isobatas$lon > xmin & isobatas$lat < ymax & isobatas$lat > ymin)
isobatas <- isobatas[celdas_iso,]
costa <- readShapeLines(fn="~/Documentos/Shiny/SBL/shapes/linea_de_costa.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
# Extensión
xmin <- -55.0853471962
xmax <- -54.8169908485
ymin <- -35.0635161252
ymax <- -34.8499263791
# Shapefiles de base
costa <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/linea_de_costa.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
est_mejillon <- readShapePoints(fn="/home/guzman/Shiny/SBL/shapes/Estaciones-muestreo-mejillon.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
isobatas <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/isobatas-Maldonado.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
SpatialPolygons(Srl = list())
rgeos::gIntersection(isobatas, )
isobatas <- coordinates(isobatas)
n.obs <- sapply(isobatas, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(isobatas, "[", i = seq.max))
isobatas <- as.data.frame(do.call('rbind',mat))
colnames(isobatas) <- c("lon", "lat")
celdas_iso <- which(isobatas$lon < xmax & isobatas$lon > xmin & isobatas$lat < ymax & isobatas$lat > ymin)
isobatas <- isobatas[celdas_iso,]
shiny::runApp()
library(leaflet)
shiny::runApp()
devtools::install_github('leaflet-shiny', 'jcheng5')
devtools::install_github('jcheng5/leaflet-shiny')
install_github('leaflet-shiny', 'jcheng5')
library(devtools)
install_github('leaflet-shiny', 'jcheng5')
install_github('leaflet-shiny', 'jcheng5')
devtools::install_github('leaflet-shiny', 'jcheng5')
devtools::install_local("/home/guzman/Documentos/R/leaflet-shiny-4cf37eb81342925bb3537c1678546d50b82f54f7.zip")
library(shiny)
library(leaflet)
library(sp)
library(maptools)
library(geosphere)
library(stringr)
library(xts)
shiny::runApp()
xmin <- -55.0853471962
xmax <- -54.8169908485
ymin <- -35.0635161252
ymax <- -34.8499263791
# Shapefiles de base
costa <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/linea_de_costa.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
est_mejillon <- readShapePoints(fn="/home/guzman/Shiny/SBL/shapes/Estaciones-muestreo-mejillon.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
isobatas <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/isobatas-Maldonado.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
SpatialPolygons(Srl = list())
options(shiny.maxRequestSize=300*1024^2, digits=16)
# Extensión
xmin <- -55.0853471962
xmax <- -54.8169908485
ymin <- -35.0635161252
ymax <- -34.8499263791
costa <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/linea_de_costa.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
est_mejillon <- readShapePoints(fn="/home/guzman/Shiny/SBL/shapes/Estaciones-muestreo-mejillon.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
isobatas <- readShapeLines(fn="/home/guzman/Shiny/SBL/shapes/isobatas-Maldonado.shp", proj4string=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84"))
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
SpatialPolygons(Srl = list())
Polygon(coords=matrix(data=c(xmin,xmax,xmax,xmin,ymax,ymax,ymin,ymin),4,2, byrow = FALSE))
SpatialPolygons(Srl = list())
isobatas <- coordinates(isobatas)
n.obs <- sapply(isobatas, length)
seq.max <- seq_len(max(n.obs))
mat <- t(sapply(isobatas, "[", i = seq.max))
isobatas <- as.data.frame(do.call('rbind',mat))
colnames(isobatas) <- c("lon", "lat")
celdas_iso <- which(isobatas$lon < xmax & isobatas$lon > xmin & isobatas$lat < ymax & isobatas$lat > ymin)
isobatas <- isobatas[celdas_iso,]
shinyServer(function(input, output, session) {
### Entradas de datos ####
datasetInput <- reactive({
if (is.null(input$file1)) return(NULL) else sss <- unlist(strsplit(x=readLines(file(input$file1$datapath),n=4000,), split=","))
return(sss)
})
#### Extraer Posiciones con resolución ####
datasetInput_pos <- reactive ({
if (is.null(input$file1)) return(NULL) else
posiciones <- function(sss, exportar, nombre_archivo, res){
# POSICIONES
#sss = unlist(strsplit(x=sss, split=","))
pos = which(sss=='POS')
fin = length(pos)
TS_P = NULL
for(i in 1:fin)
TS_P[i] = sss[pos[i]+1]
TS_P <- strptime(x=TS_P, format="%d/%m/%Y %H:%M:%S")
LAT = NULL
for(i in 1:fin)
LAT[i] = sss[pos[i]+2]
LON = NULL
for(i in 1:fin)
LON[i] = sss[pos[i]+3]
NOR = NULL
for(i in 1:fin)
NOR[i] = sss[pos[i]+5]
EST = NULL
for(i in 1:fin)
EST[i] = sss[pos[i]+6]
# Data frame
df_pos = data.frame(Tiempo=TS_P, LAT=as.numeric(LAT), LON=as.numeric(LON), UTM_N=as.numeric(NOR), UTM_E=as.numeric(EST))
# Sacar datos repetidos (mismo tiempo)
df_pos = df_pos[-which(duplicated(df_pos$Tiempo)),]
# Convertir a xts
df_pos = as.xts(df_pos, order.by=df_pos$Tiempo)
# Agrupar por tiempo
if(res != 0)  {
df_pos = split.xts(df_pos, f='minutes', k=res)
df = matrix(ncol=5, nrow=length(df_pos))
for(i in 1:length(df_pos))
df[i,] = as.vector(df_pos[[i]][1,])
df = as.data.frame(df)
df_pos = data.frame("Tiempo"=as.character(df$V1), "LAT"=as.character(df$V2), "LON"=as.character(df$V3), "UTM_N"=as.character(df$V4), "UTM_E"=as.character(df$V5))
# Exportar
if(exportar == 'si') write.table(df_pos, paste("/home/guzman/Documentos/DINARA/SIG/Mejillon/Tablas/",nombre_archivo,".csv", sep=""), sep=",", row.names=FALSE) & return(df_pos)
if(exportar == 'no') return(df_pos)
}
if(res == 0)  {
df_pos = as.data.frame(df_pos)
# Exportar
if(exportar == 'si') write.table(df_pos, paste("/home/guzman/Documentos/DINARA/SIG/Mejillon/Tablas/",nombre_archivo,".csv", sep=""), sep=",", row.names=FALSE) & return(df_pos)
if(exportar == 'no') return(df_pos)
}
}
if(is.null(input$exportar)) exp <- 'no' else exp <- 'si'
sss_pos <- posiciones(sss=datasetInput(), exportar=exp, nombre_archivo=input$nombre_de_archivo, res=input$res)
return(sss_pos)
})
### Tabla ####
output$table <- renderDataTable({
datasetInput_pos()
})
### SIG ####
### Interactive Map ####
# Crear mapa
map <- createLeafletMap(session, "map")
# Capas:
capas <- observe({
# Estaciones mejillón:
if(length(input$capas)==0) {
map$clearShapes()
return(NULL)
}
if(length(input$capas)!=0) {
map$clearShapes()
# Estaciones de mejillón
if(length(which(input$capas=='est_mej'))!=0) {
map$addCircle(
lat=est_mejillon$dd.lat,
lng=est_mejillon$dd.lon,
radius=10000/max(12, input$map_zoom)^2,
layerId=as.character(est_mejillon$est),
list(weight = 1,                      # stroke weight
fill = TRUE,                     # fill object
color = '#808080',               # stroke color, grey
opacity = 1,                     # stroke opacity
fillColor = 'black',             # fill color
fillOpacity = 1,                 # fill opacity
clickable = T)
)
}
# Isóbatas
if(length(which(input$capas=='isobatas'))!=0) {
map$addPolyline(
lat=isobatas$lat,
lng=isobatas$lon,
as.character(1),
list(color= '#808080',
weight=2,
opacity=1,
lineJoin='round', clickeable=T)
)
}
}
})
})
shiny::runApp()
save.image(file = "/home/guzman/Escritorio/pas-dinara.RData")
load("/home/guzman/Escritorio/pas-dinara.RData")
entorno <- url("https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData")
entorno
library(Rcurl)
download.file(url = entorno)
download.file(url = entorno, destfile = "/home/guzman/Escritorio/pas-dinara.RData")
download.file(url = "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData", destfile = "/home/guzman/Escritorio/pas-dinara.RData")
download.file(url = "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData", destfile = "/home/guzman/Escritorio/pas-dinara.RData", method = "wget")
rm(entorno)
url_entorno <- url("https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData")
download.file(url = url_entorno, destfile = "/home/guzman/Escritorio/pas-dinara.RData", method = "wget")
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
download.file(url=url_entorno, destfile= "/home/guzman/Escritorio/pas-dinara.RData", method = "wget")
getwd()
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
download.file(url = url_entorno, destfile=getwd(), method = "wget")
ubicacion <- getwd()
ubicacion
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
ubicacion <- getwd()
download.file(url = url_entorno, destfile=ubicacion), method = "wget")
ubicacion
destfile <- paste(getwd(),"/pas-dinara.RData")
destfile
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
destfile
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
download.file(url = url_entorno, destfile=destfile), method = "wget")
load("pas-dinara.RData")
setwd("/home/guzman/")
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
destfile
download.file(url = url_entorno, destfile=destfile, method = "wget")
load("pas-dinara.RData")
load("/home/guzman/pas-dinara.RData")
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData"
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
download.file(url = url_entorno, destfile=destfile, method = "auto", mode = "wb")
download.file(url = url_entorno, destfile=destfile, method = "curl", mode = "wb")
download.file(url = url_entorno, destfile=destfile, method = "wget", mode = "wb")
load("/home/guzman/Escritorio/pas-dinara.RData")
load("/home/guzman/Escritorio/pas-dinara.RData")
load("/home/guzman/GitHub/PAS-DINARA/pas-dinara.RData")
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData?raw=true"
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
download.file(url = url_entorno, destfile=destfile, method = "wget")
load("pas-dinara.RData")
shiny::runApp('GitHub/PAS-DINARA')
wd <- getwd()
wd
paste(wd,"/", sep="")
paste(getwd(),"/", sep="")
wd <- paste(getwd(),"/", sep="")
destfile <- paste(getwd(),"pas-dinara.RData", sep="")
destfile
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
destfile
wd <- paste(getwd(),"/", sep="")
wd
paste(wd,"binding.js", sep="")
setwd("/home/guzman/Escritorio/Prueba/")
url_entorno <- "https://github.com/guzmanlopez/PAS-DINARA/blob/master/pas-dinara.RData?raw=true"
destfile <- paste(getwd(),"/pas-dinara.RData", sep="")
wd <- paste(getwd(),"/", sep="")
download.file(url = url_entorno, destfile=destfile, method = "wget")
load("pas-dinara.RData")
# Descargar javascripts y estilos
url_binding <- "https://raw.githubusercontent.com/guzmanlopez/PAS-DINARA/master/binding.js"
download.file(url = url_binding, destfile=paste(wd,"binding.js", sep=""), method = "wget")
url_gomap <- "https://raw.githubusercontent.com/guzmanlopez/PAS-DINARA/master/gomap.js"
download.file(url = url_gomap, destfile=paste(wd,"gomap.js", sep=""), method = "wget")
url_styles <- "https://raw.githubusercontent.com/guzmanlopez/PAS-DINARA/master/styles.css"
download.file(url = url_styles, destfile=paste(wd,"styles.css", sep=""), method = "wget")
setwd("/tmp/")
setwd("/tmp/")
runGitHub("PAS-DINARA", "guzmanlopez")
getwd()
getwd()
runGitHub("PAS-DINARA", "guzmanlopez")
library(shiny)
library(oce)
library(gnumeric)
library(xts)
suppressPackageStartupMessages(library(googleVis))
celdas_flags_tabla <- list(NA)
valores_flags_tabla <- list(NA)
columnas <- c("Presion", "Temp", "Cond", "Turb", "OD", "Bateria", "Fluo")
for(i in 1:length(columnas))
celdas_flags_tabla[[i]] <- as.factor(NA)
names(celdas_flags_tabla) <- columnas
for(i in 1:length(columnas))
valores_flags_tabla[[i]] <- as.factor(NA)
names(valores_flags_tabla) <- columnas
getwd()
setwd("/home/guzman/GitHub/Ema/")
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png")
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png", destfile = getwd())
wd <- getwd()
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png", destfile = wd)
wd <- getwd()
wd
wd <- paste(getwd(),"/logo_ema_freplata.png")
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png", destfile = wd)
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png", destfile = wd, method='wget')
### Vectores de celdas y valores para eliminar
celdas_flags_tabla <- list(NA)
valores_flags_tabla <- list(NA)
columnas <- c("Presion", "Temp", "Cond", "Turb", "OD", "Bateria", "Fluo")
for(i in 1:length(columnas))
celdas_flags_tabla[[i]] <- as.factor(NA)
names(celdas_flags_tabla) <- columnas
for(i in 1:length(columnas))
valores_flags_tabla[[i]] <- as.factor(NA)
names(valores_flags_tabla) <- columnas
output$logo <- renderImage({
filename <- "https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png"
list(src = filename,
contentType = 'image/png')
}, deleteFile = FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
filename <- "https://github.com/guzmanlopez/Ema/blob/master/Figuras/logo_ema_freplata.png?raw=true"
list(src = filename,contentType = 'image/png')
download.file("https://dl.dropboxusercontent.com/u/49775366/Ema/logo_ema_freplata.png", destfile = wd, method='wget')
wd
shiny::runApp()
HTML('<div style="clear: left;"><img src="https://github.com/guzmanlopez/Ema/blob/master/Figuras/logo_ema_freplata.png?raw=true" alt="" style="width: 100%; height: 100%; float: left; margin-right:5px" /></div>')
shiny::runApp()
shiny::runApp()
shiny::runApp()
